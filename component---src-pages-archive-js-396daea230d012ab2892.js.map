{"version":3,"file":"component---src-pages-archive-js-396daea230d012ab2892.js","mappings":"qMAUQA,EAA6BC,EAAAA,GAAAA,OAArBC,EAAqBD,EAAAA,GAAAA,MAAdE,EAAcF,EAAAA,GAAAA,UAE/BG,GAAsBC,EAAAA,EAAAA,SAAOC,EAAAA,IAAV,kFAAGD,CAAH,MACnBE,EAAuBF,EAAAA,QAAAA,IAAAA,WAAH,wEAAGA,CAAH,4BAEtBG,EAAAA,GAAAA,OAFsB,qDAMpBC,EAAcJ,EAAAA,QAAAA,MAAAA,WAAH,+DAAGA,CAAH,iiBAKXG,EAAAA,GAAAA,OALW,kDAWCP,EAAAA,GAAAA,WAIQD,EAAOU,UAQ3BF,EAAAA,GAAAA,OAvBW,kDAiCTA,EAAAA,GAAAA,OAjCS,sDAkCIL,EAAUQ,IAKhBX,EAAOY,cACHT,EAAUU,GAMVV,EAAUW,GAGVX,EAAUY,GACRb,EAAMc,OAafC,EAAAA,GAAAA,YAgHZ,UAlGoB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SACfC,EADoC,EAAXC,KACTC,kBAAkBC,MAElCC,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,GAAcD,EAAAA,EAAAA,QAAO,MACrBE,GAAiBF,EAAAA,EAAAA,QAAO,IAO9B,OANAG,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,OAAUL,EAAYM,SAASC,EAAAA,EAAAA,aAC/BF,EAAAA,EAAAA,OAAUH,EAAYI,SAASC,EAAAA,EAAAA,aAC/BJ,EAAeG,QAAQE,SAAQ,SAACC,EAAKC,GAAN,OAAYL,EAAAA,EAAAA,OAAUI,GAAKF,EAAAA,EAAAA,UAAa,GAAJG,SAClE,IAGD,gBAAC,KAAD,CAAQf,SAAUA,GAChB,gBAAC,IAAD,KACE,wDACA,wBAAMgB,IAAI,YAAYC,KAAK,0CAG7B,gBAAC/B,EAAD,KACE,0BAAQ4B,IAAKT,GACX,sBAAIa,UAAU,aAAd,WACA,qBAAGA,UAAU,YAAb,wCAGF,gBAAC7B,EAAD,CAAsByB,IAAKP,GACzB,gBAAChB,EAAD,KACE,6BACE,0BACE,kCACA,mCACA,sBAAI2B,UAAU,kBAAd,WACA,sBAAIA,UAAU,kBAAd,cACA,oCAGJ,6BACGjB,EAASkB,OAAS,GACjBlB,EAASmB,KAAI,WAAWL,GAAO,IAC7B,EAD4B,EAAdM,KACgDC,YAAtDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,MAAOC,EAAvC,EAAuCA,KAAMC,EAA7C,EAA6CA,QAC7C,OACE,sBAAIC,IAAKd,EAAGD,IAAK,SAAAgB,GAAE,OAAKtB,EAAeG,QAAQI,GAAKe,IAClD,sBAAIZ,UAAU,iBAAd,GAAkC,IAAIa,KAAKR,GAAMS,eAEjD,sBAAId,UAAU,SAASQ,GAEvB,sBAAIR,UAAU,0BACXU,EAAU,4BAAOA,GAAkB,kCAGtC,sBAAIV,UAAU,uBACXS,EAAKR,OAAS,GACbQ,EAAKP,KAAI,SAACa,EAAMlB,GAAP,OACP,wBAAMc,IAAKd,GACRkB,EACA,GACAlB,IAAMY,EAAKR,OAAS,GAAK,wBAAMD,UAAU,aAAhB,UAKlC,sBAAIA,UAAU,SACZ,4BACGO,GACC,qBACER,KAAMQ,EACNS,OAAO,SACPlB,IAAI,+BACJ,aAAW,iBACX,gBAAC,KAAD,CAAemB,KAAK,cAGvBX,GACC,qBACEP,KAAMO,EACNU,OAAO,SACPlB,IAAI,+BACJ,aAAW,eACX,gBAAC,KAAD,CAAemB,KAAK","sources":["webpack://v2/./src/pages/archive.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport sr from '@utils/sr';\nimport { srConfig } from '@config';\nimport { Layout } from '@components';\nimport { FormattedIcon } from '@components/icons';\nimport styled from 'styled-components';\nimport { theme, mixins, media, Main } from '@styles';\nconst { colors, fonts, fontSizes } = theme;\n\nconst StyledMainContainer = styled(Main)``;\nconst StyledTableContainer = styled.div`\n  margin: 100px -20px;\n  ${media.tablet`\n    margin: 100px -10px;\n  `};\n`;\nconst StyledTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n\n  .hide-on-mobile {\n    ${media.tablet`\n      display: none;\n    `};\n  }\n\n  tbody tr {\n    transition: ${theme.transition};\n\n    &:hover,\n    &:focus {\n      background-color: ${colors.lightNavy};\n    }\n  }\n  th,\n  td {\n    cursor: default;\n    line-height: 1.5;\n    padding: 10px 20px;\n    ${media.tablet`\n      padding: 10px;\n    `};\n  }\n  th {\n    text-align: left;\n  }\n  td {\n    &.year {\n      width: 10%;\n      ${media.tablet`\n        font-size: ${fontSizes.sm};\n      `};\n    }\n    &.title {\n      padding-top: 15px;\n      color: ${colors.lightestSlate};\n      font-size: ${fontSizes.xl};\n      font-weight: 700;\n    }\n    &.company {\n      width: 15%;\n      padding-top: 15px;\n      font-size: ${fontSizes.lg};\n    }\n    &.tech {\n      font-size: ${fontSizes.xs};\n      font-family: ${fonts.SFMono};\n      .separator {\n        margin: 0 5px;\n      }\n      span {\n        display: inline-block;\n      }\n    }\n    &.links {\n      span {\n        display: flex;\n        align-items: center;\n        a {\n          ${mixins.flexCenter};\n        }\n        a + a {\n          margin-left: 10px;\n        }\n        svg {\n          width: 20px;\n          height: 20px;\n        }\n      }\n    }\n  }\n`;\n\nconst ArchivePage = ({ location, data }) => {\n  const projects = data.allMarkdownRemark.edges;\n\n  const revealTitle = useRef(null);\n  const revealTable = useRef(null);\n  const revealProjects = useRef([]);\n  useEffect(() => {\n    sr.reveal(revealTitle.current, srConfig());\n    sr.reveal(revealTable.current, srConfig());\n    revealProjects.current.forEach((ref, i) => sr.reveal(ref, srConfig(i * 10)));\n  }, []);\n\n  return (\n    <Layout location={location}>\n      <Helmet>\n        <title>Archive | Sourabh Kumar</title>\n        <link rel=\"canonical\" href=\"https://sourabhbit.github.io/archive\" />\n      </Helmet>\n\n      <StyledMainContainer>\n        <header ref={revealTitle}>\n          <h1 className=\"big-title\">Archive</h1>\n          <p className=\"subtitle\">A big list of things I’ve worked on</p>\n        </header>\n\n        <StyledTableContainer ref={revealTable}>\n          <StyledTable>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Title</th>\n                <th className=\"hide-on-mobile\">Made at</th>\n                <th className=\"hide-on-mobile\">Built with</th>\n                <th>Link</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.length > 0 &&\n                projects.map(({ node }, i) => {\n                  const { date, github, external, title, tech, company } = node.frontmatter;\n                  return (\n                    <tr key={i} ref={el => (revealProjects.current[i] = el)}>\n                      <td className=\"overline year\">{`${new Date(date).getFullYear()}`}</td>\n\n                      <td className=\"title\">{title}</td>\n\n                      <td className=\"company hide-on-mobile\">\n                        {company ? <span>{company}</span> : <span>—</span>}\n                      </td>\n\n                      <td className=\"tech hide-on-mobile\">\n                        {tech.length > 0 &&\n                          tech.map((item, i) => (\n                            <span key={i}>\n                              {item}\n                              {''}\n                              {i !== tech.length - 1 && <span className=\"separator\">&middot;</span>}\n                            </span>\n                          ))}\n                      </td>\n\n                      <td className=\"links\">\n                        <span>\n                          {external && (\n                            <a\n                              href={external}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"External Link\">\n                              <FormattedIcon name=\"External\" />\n                            </a>\n                          )}\n                          {github && (\n                            <a\n                              href={github}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"GitHub Link\">\n                              <FormattedIcon name=\"GitHub\" />\n                            </a>\n                          )}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </StyledTable>\n        </StyledTableContainer>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\nArchivePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            tech\n            github\n            external\n            company\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"names":["colors","theme","fonts","fontSizes","StyledMainContainer","styled","Main","StyledTableContainer","media","StyledTable","lightNavy","sm","lightestSlate","xl","lg","xs","SFMono","mixins","location","projects","data","allMarkdownRemark","edges","revealTitle","useRef","revealTable","revealProjects","useEffect","sr","current","srConfig","forEach","ref","i","rel","href","className","length","map","node","frontmatter","date","github","external","title","tech","company","key","el","Date","getFullYear","item","target","name"],"sourceRoot":""}